<<<<<<< HEAD
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
=======
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
>>>>>>> c7f9ffc649aa0760c82fb6b3f1d4a6c290bb0d58
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
<<<<<<< HEAD
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

=======
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

>>>>>>> c7f9ffc649aa0760c82fb6b3f1d4a6c290bb0d58
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
<<<<<<< HEAD
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  wallet        String?
  walletAmount  Float?        @default(0)
  accounts      Account[]
  adminIncomes  AdminIncome[]
  sessions      Session[]
  donations     Donation[]
}

model Donation {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  category     String
  goal         Float
  amountRaised Float    @default(0)
  image        String?
  walletId     String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminIncome {
  id        Int      @id @default(autoincrement())
  amount    Float
  userId    String
  donatedBy String?
  date      DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
=======
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  subscriptionId     String?   @unique
  subscriptionStatus String?
  profile            Profile?
  profileId          String? 
  Template           Template[]
}

model Profile {
  id          String      @id @default(cuid())
  fullName    String
  email       String
  bio         String
  avatar      String?
  skills      Skill[]       @relation("ProfileSkills")
  projects    Project[]     @relation("ProfileProjects")
  socialLinks SocialLink[]  @relation("ProfileSocialLinks")
  education   Education[]
  experience  Experience[]
  userId      String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Template {
  id        String   @id @default(cuid())
  name      String
  subject   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  isDefault Boolean @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  level       String
  profileId   String
  profile     Profile  @relation("ProfileSkills", fields: [profileId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  link        String?
  profileId   String
  profile     Profile  @relation("ProfileProjects", fields: [profileId], references: [id], onDelete: Cascade)
}


model SocialLink {
  id          String   @id @default(cuid())
  platform    String
  url         String
  profileId   String
  profile     Profile  @relation("ProfileSocialLinks", fields: [profileId], references: [id], onDelete: Cascade)
}

model Education {
  id          String @id @default(cuid())
  institution String
  degree      String
  year        String
  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String @id @default(cuid())
  company     String
  position    String
  startDate   String
  endDate     String?
  description String
  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
>>>>>>> c7f9ffc649aa0760c82fb6b3f1d4a6c290bb0d58
}
